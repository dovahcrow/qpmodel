Total cost: 8.1
PhysicOrder  (inccost=8.1, cost=0.1, rows=1) (actual rows=7)
    Output: custsale.cntrycode[0],{count(*)(0)}[1],{sum(custsale.c_acctbal)}[2]
    Order by: custsale.cntrycode[0]
    -> PhysicHashAgg  (inccost=8, cost=3, rows=1) (actual rows=7)
        Output: {custsale.cntrycode}[0],{count(*)(0)}[1],{sum(custsale.c_acctbal)}[2]
        Aggregates: count(*)(0), sum(custsale.c_acctbal[1])
        Group by: custsale.cntrycode[0]
        -> PhysicFromQuery <custsale> (inccost=5, cost=1, rows=1) (actual rows=9)
            Output: custsale.cntrycode[0],custsale.c_acctbal[1]
            -> PhysicFilter  (inccost=4, cost=1, rows=1) (actual rows=9)
                Output: {substring(customer.c_phone,1,2)}[1],customer.c_acctbal[2]
                Filter: {#marker}[0]
                -> PhysicMarkJoin Left (inccost=3, cost=1, rows=1) (actual rows=17)
                    Output: #marker,{substring(customer.c_phone,1,2)}[0],customer.c_acctbal[1]
                    Filter: orders.o_custkey[3]=customer.c_custkey[2]
                    -> PhysicScanTable customer (inccost=1, cost=1, rows=1) (actual rows=17)
                        Output: substring(customer.c_phone[4],1,2),customer.c_acctbal[5],customer.c_custkey[0]
                        Filter: substring(customer.c_phone[4],1,2) in ('13','31','23', ... <Total: 7> ) and customer.c_acctbal[5]>@1
                        <ScalarSubqueryExpr> cached 1
                            -> PhysicHashAgg  (inccost=4, cost=3, rows=1) (actual rows=1)
                                Output: {avg(customer__1.c_acctbal)}[0]
                                Aggregates: avg(customer__1.c_acctbal[0])
                                -> PhysicScanTable customer as customer__1 (inccost=1, cost=1, rows=1) (actual rows=35)
                                    Output: customer__1.c_acctbal[5]
                                    Filter: customer__1.c_acctbal[5]>0.00 and substring(customer__1.c_phone[4],1,2) in ('13','31','23', ... <Total: 7> )
                    -> PhysicScanTable orders (inccost=1, cost=1, rows=1) (actual rows=1500, loops=17)
                        Output: orders.o_custkey[1]
