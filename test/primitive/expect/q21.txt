Total cost: NaN
PhysicLimit (100) (inccost=NaN, cost=100, rows=100) (actual rows=0)
    Output: supplier.s_name[0],{count(*)(0)}[1]
    -> PhysicOrder  (inccost=NaN, cost=NaN, rows=1) (actual rows=0)
        Output: supplier.s_name[0],{count(*)(0)}[1]
        Order by: {count(*)(0)}[1], supplier.s_name[0]
        -> PhysicHashAgg  (inccost=140, cost=1, rows=0) (actual rows=0)
            Output: {supplier.s_name}[0],{count(*)(0)}[1]
            Aggregates: count(*)(0)
            Group by: supplier.s_name[0]
            -> PhysicFilter  (inccost=139, cost=1, rows=1) (actual rows=0)
                Output: supplier.s_name[1]
                Filter: {#marker}[0]
                -> PhysicMarkJoin Left (inccost=138, cost=1, rows=1) (actual rows=0)
                    Output: #marker,supplier.s_name[0]
                    Filter: l2.l_orderkey[3]=l1.l_orderkey[1] and l2.l_suppkey[4]<>l1.l_suppkey[2]
                    -> PhysicFilter  (inccost=136, cost=1, rows=1) (actual rows=0)
                        Output: supplier.s_name[1],l1.l_orderkey[2],l1.l_suppkey[3]
                        Filter: {#marker}[0]
                        -> PhysicMarkJoin Left (inccost=135, cost=1, rows=1) (actual rows=0)
                            Output: #marker,supplier.s_name[0],l1.l_orderkey[1],l1.l_suppkey[2]
                            Filter: l3.l_orderkey[3]=l1.l_orderkey[1] and l3.l_suppkey[4]<>l1.l_suppkey[2]
                            -> PhysicHashJoin  (inccost=133, cost=4, rows=1) (actual rows=0)
                                Output: supplier.s_name[0],l1.l_orderkey[3],l1.l_suppkey[4]
                                Filter: supplier.s_suppkey[1]=l1.l_suppkey[4] and supplier.s_nationkey[2]=nation.n_nationkey[5]
                                -> PhysicScanTable supplier (inccost=1, cost=1, rows=1) (actual rows=10)
                                    Output: supplier.s_name[1],supplier.s_suppkey[0],supplier.s_nationkey[3]
                                -> PhysicNLJoin  (inccost=128, cost=121, rows=1) (actual rows=1783)
                                    Output: l1.l_orderkey[1],l1.l_suppkey[2],nation.n_nationkey[0]
                                    -> PhysicScanTable nation (inccost=1, cost=1, rows=1) (actual rows=1)
                                        Output: nation.n_nationkey[0]
                                        Filter: nation.n_name[1]='SAUDI ARABIA'
                                    -> PhysicHashJoin  (inccost=6, cost=4, rows=1) (actual rows=1783)
                                        Output: l1.l_orderkey[1],l1.l_suppkey[2]
                                        Filter: orders.o_orderkey[0]=l1.l_orderkey[1]
                                        -> PhysicScanTable orders (inccost=1, cost=1, rows=1) (actual rows=726)
                                            Output: orders.o_orderkey[0]
                                            Filter: orders.o_orderstatus[2]='F'
                                        -> PhysicScanTable lineitem as l1 (inccost=1, cost=1, rows=1) (actual rows=3752)
                                            Output: l1.l_orderkey[0],l1.l_suppkey[2]
                                            Filter: l1.l_receiptdate[12]>l1.l_commitdate[11]
                            -> PhysicScanTable lineitem as l3 (inccost=1, cost=1, rows=1) (actual rows=0)
                                Output: l3.l_orderkey[0],l3.l_suppkey[2]
                                Filter: l3.l_receiptdate[12]>l3.l_commitdate[11]
                    -> PhysicScanTable lineitem as l2 (inccost=1, cost=1, rows=1) (actual rows=0)
                        Output: l2.l_orderkey[0],l2.l_suppkey[2]
