Total cost: 20573.58
PhysicLimit (100) (inccost=20573.58, cost=100, rows=100) (actual rows=0)
    Output: supplier.s_acctbal[0],supplier.s_name[1],nation.n_name[2],part.p_partkey[3],part.p_mfgr[4],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7]
    -> PhysicOrder  (inccost=20473.58, cost=1.58, rows=2) (actual rows=0)
        Output: supplier.s_acctbal[0],supplier.s_name[1],nation.n_name[2],part.p_partkey[3],part.p_mfgr[4],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7]
        Order by: supplier.s_acctbal[0], nation.n_name[2], supplier.s_name[1], part.p_partkey[3]
        -> PhysicFilter  (inccost=20472, cost=2, rows=2) (actual rows=0)
            Output: supplier.s_acctbal[0],supplier.s_name[1],nation.n_name[2],part.p_partkey[3],part.p_mfgr[4],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7]
            Filter: partsupp.ps_supplycost[8]={min(partsupp__1.ps_supplycost)}[9]
            -> PhysicNLJoin Left (inccost=20470, cost=2520, rows=2) (actual rows=0)
                Output: supplier.s_acctbal[0],supplier.s_name[1],nation.n_name[2],part.p_partkey[3],part.p_mfgr[4],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7],partsupp.ps_supplycost[8],{min(partsupp__1.ps_supplycost)}[9]
                Filter: part.p_partkey[3]=partsupp__1.ps_partkey[10]
                -> PhysicNLJoin  (inccost=14184, cost=4994, rows=2) (actual rows=0)
                    Output: supplier.s_acctbal[2],supplier.s_name[3],nation.n_name[4],part.p_partkey[0],part.p_mfgr[1],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7],partsupp.ps_supplycost[8]
                    Filter: part.p_partkey[0]=partsupp.ps_partkey[9]
                    -> PhysicScanTable part (inccost=200, cost=200, rows=1) (actual rows=0)
                        Output: part.p_partkey[0],part.p_mfgr[2]
                        Filter: part.p_size[5]=15 and part.p_type[4]like'%BRASS'
                    -> PhysicHashJoin  (inccost=8990, cost=2668, rows=444) (actual rows=0)
                        Output: supplier.s_acctbal[1],supplier.s_name[2],nation.n_name[3],supplier.s_address[4],supplier.s_phone[5],supplier.s_comment[6],partsupp.ps_supplycost[7],partsupp.ps_partkey[8]
                        Filter: nation.n_regionkey[9]=region.r_regionkey[0]
                        -> PhysicScanTable region (inccost=5, cost=5, rows=1) (actual rows=0)
                            Output: region.r_regionkey[0]
                            Filter: region.r_name[1]='EUROPE'
                        -> PhysicHashJoin  (inccost=6317, cost=3072, rows=2222) (actual rows=0)
                            Output: supplier.s_acctbal[3],supplier.s_name[4],nation.n_name[0],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7],partsupp.ps_supplycost[8],partsupp.ps_partkey[9],nation.n_regionkey[1]
                            Filter: supplier.s_nationkey[10]=nation.n_nationkey[2]
                            -> PhysicScanTable nation (inccost=25, cost=25, rows=25) (actual rows=0)
                                Output: nation.n_name[1],nation.n_regionkey[2],nation.n_nationkey[0]
                            -> PhysicHashJoin  (inccost=3220, cost=2410, rows=800) (actual rows=0)
                                Output: supplier.s_acctbal[3],supplier.s_name[4],supplier.s_address[5],supplier.s_phone[6],supplier.s_comment[7],partsupp.ps_supplycost[0],partsupp.ps_partkey[1],supplier.s_nationkey[8]
                                Filter: supplier.s_suppkey[9]=partsupp.ps_suppkey[2]
                                -> PhysicScanTable partsupp (inccost=800, cost=800, rows=800) (actual rows=0)
                                    Output: partsupp.ps_supplycost[3],partsupp.ps_partkey[0],partsupp.ps_suppkey[1]
                                -> PhysicScanTable supplier (inccost=10, cost=10, rows=10) (actual rows=0)
                                    Output: supplier.s_acctbal[5],supplier.s_name[1],supplier.s_address[2],supplier.s_phone[4],supplier.s_comment[6],supplier.s_nationkey[3],supplier.s_suppkey[0]
                -> PhysicHashAgg  (inccost=3766, cost=800, rows=200) (actual rows=0)
                    Output: {min(partsupp__1.ps_supplycost)}[1],{partsupp__1.ps_partkey}[0]
                    Aggregates: min(partsupp__1.ps_supplycost[1])
                    Group by: partsupp__1.ps_partkey[0]
                    -> PhysicHashJoin  (inccost=2966, cost=2005, rows=400) (actual rows=0)
                        Output: partsupp__1.ps_partkey[0],partsupp__1.ps_supplycost[1]
                        Filter: supplier__1.s_suppkey[3]=partsupp__1.ps_suppkey[2]
                        -> PhysicScanTable partsupp as partsupp__1 (inccost=800, cost=800, rows=800) (actual rows=0)
                            Output: partsupp__1.ps_partkey[0],partsupp__1.ps_supplycost[3],partsupp__1.ps_suppkey[1]
                        -> PhysicHashJoin  (inccost=161, cost=34, rows=5) (actual rows=0)
                            Output: supplier__1.s_suppkey[1]
                            Filter: nation__1.n_regionkey[2]=region__1.r_regionkey[0]
                            -> PhysicScanTable region as region__1 (inccost=5, cost=5, rows=1) (actual rows=0)
                                Output: region__1.r_regionkey[0]
                                Filter: region__1.r_name[1]='EUROPE'
                            -> PhysicHashJoin  (inccost=122, cost=87, rows=27) (actual rows=0)
                                Output: supplier__1.s_suppkey[2],nation__1.n_regionkey[0]
                                Filter: supplier__1.s_nationkey[3]=nation__1.n_nationkey[1]
                                -> PhysicScanTable nation as nation__1 (inccost=25, cost=25, rows=25) (actual rows=0)
                                    Output: nation__1.n_regionkey[2],nation__1.n_nationkey[0]
                                -> PhysicScanTable supplier as supplier__1 (inccost=10, cost=10, rows=10) (actual rows=0)
                                    Output: supplier__1.s_suppkey[0],supplier__1.s_nationkey[3]
